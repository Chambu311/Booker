// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_URL")
    relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    createdAt         DateTime @default(now())
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id               String         @id @default(cuid())
    name             String         @unique
    password         String?
    email            String?        @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    role             Role           @default(USER)
    books            Book[]
    swapsAsRequester SwapRequest[]  @relation("RequesterUser")
    swapsAsHolder    SwapRequest[]  @relation("HolderUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Book {
    id                      String            @id @default(cuid())
    title                   String
    author                  String
    genre                   Genre             @relation(fields: [genreId], references: [id])
    genreId                 String
    type                    BookType          @relation(fields: [typeId], references: [id])
    typeId                  String
    publications            BookPublication[]
    user                    User              @relation(fields: [userId], references: [id])
    userId                  String
    swapRequestsAsHolder    SwapRequest[]     @relation("RequesterBook")
    swapRequestsAsRequester SwapRequest[]     @relation("HolderBook")

    @@index([genreId])
    @@index([typeId])
    @@index([userId])
}

model PublicationImage {
    id            String          @id @default(cuid())
    src           String
    publication   BookPublication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
    publicationId String

    @@index([publicationId])
}

model BookPublication {
    id        String             @id @default(cuid())
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    isActive  Boolean            @default(false)
    bookId    String
    book      Book               @relation(fields: [bookId], references: [id], onDelete: Cascade)
    comment   String
    images    PublicationImage[]

    @@index([bookId])
}

model SwapRequest {
    id              String     @id @default(cuid())
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    status          SwapStatus @default(PENDING_HOLDER)
    requester       User       @relation("RequesterUser", fields: [requesterId], references: [id])
    requesterId     String
    holder          User       @relation("HolderUser", fields: [holderId], references: [id])
    holderId        String
    holderBook      Book       @relation("HolderBook", fields: [holderBookId], references: [id])
    holderBookId    String
    requesterBook   Book?      @relation("RequesterBook", fields: [requesterBookId], references: [id])
    requesterBookId String?

    @@index([requesterId])
    @@index([holderId])
    @@index([requesterBookId])
    @@index([holderBookId])
}

// model SwapNotification {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     user      User     @relation(fields: [userId], references: [id])
//     userId    String

//     @@index([userId])
// }

model Genre {
    id    String @id @default(cuid())
    name  String
    books Book[]
}

model BookType {
    id    String @id @default(cuid())
    name  String
    books Book[]
}

enum Role {
    USER
    ADMIN
}

enum SwapStatus {
    PENDING_HOLDER
    ACCEPTED
    CANCELLED
    REJECTED
}

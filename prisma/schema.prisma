// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_URL")
    relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    createdAt         DateTime @default(now())
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    catalogs      Catalog[]
    role          Role       @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Catalog {
    id           String        @id @default(cuid())
    name         String
    description  String        @default("Mi cat√°logo")
    createdAt    DateTime      @default(now())
    catalogBooks CatalogBook[]
    user         User          @relation(fields: [userId], references: [id])
    userId       String

    @@index([userId])
}

model Book {
    id                 String            @id @default(cuid())
    title              String
    author             String
    genre              Genre             @relation(fields: [genreId], references: [id])
    genreId            String
    type               BookType          @relation(fields: [typeId], references: [id])
    typeId             String
    catalogAssociation CatalogBook[]
    publications       BookPublication[]

    @@index([genreId])
    @@index([typeId])
}

model BookPublication {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime
    isActive  Boolean  @default(false)
    bookId    String
    book      Book     @relation(fields: [bookId], references: [id])
    comment   String

    @@index([bookId])
}

model CatalogBook {
    id        String  @id @default(cuid())
    catalog   Catalog @relation(fields: [catalogId], references: [id])
    catalogId String
    book      Book    @relation(fields: [bookId], references: [id])
    bookId    String

    @@index([catalogId])
    @@index([bookId])
}

model Genre {
    id    String @id @default(cuid())
    name  String
    books Book[]
}

model BookType {
    id    String @id @default(cuid())
    name  String
    books Book[]
}

enum Role {
    USER
    ADMIN
}
